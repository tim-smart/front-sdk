{"version":3,"sources":["index.ts"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["/*\nCopyright 2017 Resin.io\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n   http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n/* tslint:disable: max-classes-per-file */\n\nimport * as bodyParser from \"body-parser\";\nimport * as crypto from \"crypto\";\nimport * as express from \"express\";\nimport { Server } from \"http\";\nimport * as _ from \"lodash\";\nimport * as querystring from \"querystring\";\nimport * as request from \"request-promise-native\";\nimport { TypedError } from \"typed-error\";\n\nconst URL = \"https://api2.frontapp.com\";\n\ninterface EventPreview {\n  _links: Links;\n  id: string;\n  type: string;\n  emitted_at: number;\n}\n\ninterface Request {\n  method: string;\n  path: string;\n}\n\ntype InternalCallback = (err: Error | null, response: any | null) => void;\n\nexport class Front {\n  // Setup resource paths for catagories.\n  // Endpoint paths can require tags passed as parameters, as both mandatory and\n  // optional tags.\n  // <tag> is a mandatory tag and updates the path dynamically\n  // [tag[:tag]] is an optional tag that is used to build query string at the end of the path\n  public comment = {\n    create: (\n      params: CommentRequest.Create,\n      callback?: Callback<Comment>,\n    ): Promise<Comment> =>\n      this.httpCall(\n        { method: \"POST\", path: \"conversations/<conversation_id>/comments\" },\n        params,\n        callback,\n      ),\n    get: (\n      params: CommentRequest.Get,\n      callback?: Callback<Comment>,\n    ): Promise<Comment> =>\n      this.httpCall(\n        { method: \"GET\", path: \"comments/<comment_id>\" },\n        params,\n        callback,\n      ),\n    listMentions: (\n      params: CommentRequest.ListMentions,\n      callback?: Callback<CommentMentions>,\n    ): Promise<CommentMentions> =>\n      this.httpCall(\n        { method: \"GET\", path: \"comments/<comment_id>/mentions\" },\n        params,\n        callback,\n      ),\n  };\n\n  public contact = {\n    create: (\n      params: ContactRequest.Create,\n      callback?: Callback<Contact>,\n    ): Promise<Contact> =>\n      this.httpCall({ method: \"POST\", path: \"contacts\" }, params, callback),\n    delete: (\n      params: ContactRequest.Delete,\n      callback?: Callback<void>,\n    ): Promise<void> =>\n      this.httpCall(\n        { method: \"DELETE\", path: \"contacts/<contact_id>\" },\n        params,\n        callback,\n      ),\n    get: (\n      params: ContactRequest.Get,\n      callback?: Callback<Contact>,\n    ): Promise<Contact> =>\n      this.httpCall(\n        { method: \"GET\", path: \"contacts/<contact_id>\" },\n        params,\n        callback,\n      ),\n    update: (\n      params: ContactRequest.Update,\n      callback?: Callback<void>,\n    ): Promise<void> =>\n      this.httpCall(\n        { method: \"PATCH\", path: \"contacts/<contact_id>\" },\n        params,\n        callback,\n      ),\n  };\n\n  public conversation = {\n    get: (\n      params: ConversationRequest.Get,\n      callback?: Callback<Conversation>,\n    ): Promise<Conversation> =>\n      this.httpCall(\n        { method: \"GET\", path: \"conversations/<conversation_id>\" },\n        params,\n        callback,\n      ),\n    list: (\n      params?: ConversationRequest.List,\n      callback?: Callback<Conversations>,\n    ): Promise<Conversations> =>\n      this.httpCall(\n        { method: \"GET\", path: \"conversations[q:page_token:limit]\" },\n        params,\n        callback,\n      ),\n    listComments: (\n      params: ConversationRequest.ListComments,\n      callback?: Callback<ConversationComments>,\n    ): Promise<ConversationComments> =>\n      this.httpCall(\n        { method: \"GET\", path: \"conversations/<conversation_id>/comments\" },\n        params,\n        callback,\n      ),\n    listFollowers: (\n      params: ConversationRequest.ListFollowers,\n      callback?: Callback<ConversationFollowers>,\n    ): Promise<ConversationFollowers> =>\n      this.httpCall(\n        { method: \"GET\", path: \"conversations/<conversation_id>/followers\" },\n        params,\n        callback,\n      ),\n    listInboxes: (\n      params: ConversationRequest.ListInboxes,\n      callback?: Callback<ConversationInboxes>,\n    ): Promise<ConversationInboxes> =>\n      this.httpCall(\n        { method: \"GET\", path: \"conversations/<conversation_id>/inboxes\" },\n        params,\n        callback,\n      ),\n    listMessages: (\n      params: ConversationRequest.ListMessages,\n      callback?: Callback<ConversationMessages>,\n    ): Promise<ConversationMessages> =>\n      this.httpCall(\n        {\n          method: \"GET\",\n          path: \"conversations/<conversation_id>/messages[page_token:limit]\",\n        },\n        params,\n        callback,\n      ),\n    listRecent: (callback?: Callback<Conversations>): Promise<Conversations> =>\n      this.httpCall({ method: \"GET\", path: \"conversations\" }, null, callback),\n    update: (\n      params: ConversationRequest.Update,\n      callback?: Callback<void>,\n    ): Promise<void> =>\n      this.httpCall(\n        { method: \"PATCH\", path: `conversations/${params.conversation_id}` },\n        _.omit(params, [\"conversation_id\"]),\n        callback,\n      ),\n  };\n\n  public inbox = {\n    create: (\n      params: InboxRequest.Create,\n      callback?: Callback<InboxCreation>,\n    ): Promise<InboxCreation> =>\n      this.httpCall({ method: \"POST\", path: \"inboxes\" }, params, callback),\n    createChannel: (\n      params: InboxRequest.CreateChannel,\n      callback?: Callback<Channel>,\n    ): Promise<Channel> =>\n      this.httpCall(\n        { method: \"POST\", path: \"inboxes/<inbox_id>/channels\" },\n        params,\n        callback,\n      ),\n    get: (\n      params: InboxRequest.Get,\n      callback?: Callback<Inbox>,\n    ): Promise<Inbox> =>\n      this.httpCall(\n        { method: \"GET\", path: \"inboxes/<inbox_id>\" },\n        params,\n        callback,\n      ),\n    list: (callback?: Callback<Inboxes>): Promise<Inboxes> =>\n      this.httpCall({ method: \"GET\", path: \"inboxes\" }, null, callback),\n    listChannels: (\n      params: InboxRequest.ListChannels,\n      callback?: Callback<InboxChannels>,\n    ): Promise<InboxChannels> =>\n      this.httpCall(\n        { method: \"GET\", path: \"inboxes/<inbox_id>/channels\" },\n        params,\n        callback,\n      ),\n    listConversations: (\n      params: InboxRequest.ListConversations,\n      callback?: Callback<InboxConversations>,\n    ): Promise<InboxConversations> =>\n      this.httpCall(\n        {\n          method: \"GET\",\n          path: \"inboxes/<inbox_id>/conversations[q:page_token:limit]\",\n        },\n        params,\n        callback,\n      ),\n    listTeammates: (\n      params: InboxRequest.ListTeammates,\n      callback?: Callback<InboxTeammates>,\n    ): Promise<InboxTeammates> =>\n      this.httpCall(\n        { method: \"GET\", path: \"inboxes/<inbox_id>/teammates\" },\n        params,\n        callback,\n      ),\n  };\n\n  public message = {\n    get: (\n      params: MessageRequest.Get,\n      callback?: Callback<Message>,\n    ): Promise<Message> =>\n      this.httpCall(\n        { method: \"GET\", path: \"messages/<message_id>\" },\n        params,\n        callback,\n      ),\n    receiveCustom: (\n      params: MessageRequest.ReceiveCustom,\n      callback?: Callback<ConversationReference>,\n    ): Promise<ConversationReference> =>\n      this.httpCall(\n        { method: \"POST\", path: \"channels/<channel_id>/incoming_messages\" },\n        params,\n        callback,\n      ),\n    reply: (\n      params: MessageRequest.Reply,\n      callback?: Callback<Message>,\n    ): Promise<Message> =>\n      this.httpCall(\n        { method: \"POST\", path: \"conversations/<conversation_id>/messages\" },\n        params,\n        callback,\n      ),\n    send: (\n      params: MessageRequest.Send,\n      callback?: Callback<Message>,\n    ): Promise<Message> =>\n      this.httpCall(\n        { method: \"POST\", path: \"channels/<channel_id>/messages\" },\n        params,\n        callback,\n      ),\n  };\n\n  public teammate = {\n    get: (\n      params: TeammateRequest.Get,\n      callback?: Callback<Teammate>,\n    ): Promise<Teammate> =>\n      this.httpCall(\n        { method: \"GET\", path: \"teammates/<teammate_id>\" },\n        params,\n        callback,\n      ),\n    list: (callback?: Callback<Teammates>): Promise<Teammates> =>\n      this.httpCall({ method: \"GET\", path: \"teammates\" }, null, callback),\n    update: (\n      params: TeammateRequest.Update,\n      callback?: Callback<void>,\n    ): Promise<void> =>\n      this.httpCall(\n        { method: \"PATCH\", path: \"teammates/<teammate_id>\" },\n        params,\n        callback,\n      ),\n  };\n\n  public topic = {\n    listConversations: (\n      params: TopicRequest.ListConversations,\n      callback?: Callback<TopicConversations>,\n    ): Promise<TopicConversations> =>\n      this.httpCall(\n        {\n          method: \"GET\",\n          path: \"topics/<topic_id>/conversations[q:page_token:limit]\",\n        },\n        params,\n        callback,\n      ),\n  };\n\n  // Keys for Front access and event verification.\n  private apiKey: string;\n  private apiSecret: string;\n\n  constructor(apiKey: string, apiSecret?: string) {\n    // Key.\n    this.apiKey = apiKey;\n    // Event signature secret.\n    if (apiSecret) {\n      this.apiSecret = apiSecret;\n    }\n  }\n\n  public registerEvents(\n    opts: EventHookOptions,\n    callback: EventCallback,\n  ): Server | void {\n    let httpServer: Server | void;\n    let listener: express.Application;\n    const eventQueue: string[] = [];\n    const requestEvent = () => {\n      // Get next event in the queue.\n      const eventId = eventQueue[0];\n      this.httpCall(\n        { path: \"events/<event_id>\", method: \"GET\" },\n        {\n          event_id: eventId,\n        },\n      )\n        .then(\n          r => callback(null, r),\n          err => callback(err),\n        )\n        .finally(() => {\n          // Get another event if there is one, else finish.\n          eventQueue.shift();\n          if (eventQueue.length > 0) {\n            requestEvent();\n          }\n        });\n    };\n    const addToEventQueue = (id: string): void => {\n      // Push the event onto the queue. If there's nothing already\n      // on it, retrieve now, else just return.\n      eventQueue.push(id);\n      if (eventQueue.length === 1) {\n        requestEvent();\n      }\n    };\n\n    // Ensure we have relevant details to hook into events.\n    if (!this.apiSecret) {\n      throw new Error(\"No secret key registered\");\n    }\n    if (!opts || (opts.server && opts.port) || (!opts.server && !opts.port)) {\n      throw new Error(\"Pass either an Express instance or a port to listen on\");\n    }\n    if (opts.port && typeof opts.port !== \"number\") {\n      throw new Error(\"`port` must be a number\");\n    }\n    const hookPath = opts.hookPath || \"/fronthook\";\n\n    // If we weren't passed an express instance, we create one.\n    if (opts.server) {\n      listener = opts.server;\n    } else {\n      listener = express();\n\n      // Use body parser.\n      listener.use(bodyParser.urlencoded({ extended: true }));\n      listener.use(bodyParser.json());\n\n      httpServer = listener.listen(opts.port);\n    }\n\n    // Listen for Webhooks on the path specified by the client.\n    listener.post(hookPath, (req: express.Request, res: express.Response) => {\n      const eventPreview: EventPreview =\n        typeof req.body === \"string\" ? JSON.parse(req.body) : req.body;\n\n      // Ensure that the sender is authorised and uses our secret.\n      const XFrontSignature = req.get(\"X-Front-Signature\");\n      if (\n        !XFrontSignature ||\n        !this.validateEventSignature(eventPreview, XFrontSignature)\n      ) {\n        res.sendStatus(401);\n        throw new Error(\"Event Signature does not match registered secret\");\n      }\n\n      // Let the hook get on with it.\n      res.sendStatus(200);\n\n      // Queue up retrieval of the actual event. We need to queue these because\n      // we might otherwise receive them out of order.\n      addToEventQueue(eventPreview.id);\n    });\n\n    return httpServer;\n  }\n\n  // Utility method for occasions where we have the actual url, eg `_links`\n  public getFromLink(\n    url: string,\n    callback?: Callback<Object>,\n  ): Promise<Object> {\n    // This prunes the API url and any leading / from a path to request\n    const path = url.replace(URL, \"\").replace(/^\\//, \"\");\n    return this.httpCall({ method: \"GET\", path }, null, callback);\n  }\n\n  private httpCall(\n    details: Request,\n    params: any,\n    callback?: InternalCallback,\n    retries: number = 0,\n  ): Promise<any | void> {\n    const url = `${URL}/${this.formatPath(details.path, params)}`;\n    const body = params || {};\n\n    const requestOpts = {\n      body,\n      headers: {\n        Authorization: `Bearer ${this.apiKey}`,\n      },\n      json: true,\n      method: details.method,\n      url,\n    };\n\n    // Make the request.\n    return request(requestOpts)\n      .promise()\n      .catch((error: any) => {\n        // Retry a couple of times if we get 5XX errors, as Front\n        // can get quite unreliable sometimes\n        if (error.statusCode >= 500 && retries < 5) {\n          return new Promise(r => {\n            setTimeout(() => {\n              r();\n            }, 300);\n          }).then(() => {\n            return this.httpCall(details, params, callback, retries + 1);\n          });\n        }\n\n        // Format this into something useful, if we can.\n        const frontError = new FrontError(error);\n        frontError.message += ` at ${url} with body ${JSON.stringify(body)}`;\n        throw frontError;\n      })\n      .asCallback(callback);\n  }\n\n  private formatPath(path: string, data: RequestData = {}): string {\n    let newPath = path;\n    const reSearch = (\n      re: RegExp,\n      operation: (matches: RegExpMatchArray) => void,\n    ) => {\n      let matches = path.match(re);\n      if (matches) {\n        operation(matches);\n      }\n    };\n\n    // Find the mandatories. If we don't get them, then we error.\n    reSearch(/<(.*?)>/g, (mandatoryTags: RegExpMatchArray) => {\n      _.map(mandatoryTags, tag => {\n        const tagName = tag.substring(1, tag.length - 1);\n        if (!data[tagName]) {\n          throw new Error(`Tag ${tag} not found in parameter data`);\n        }\n        newPath = newPath.replace(tag, data[tagName]);\n      });\n    });\n\n    // Look for optionals. There should be a max of one as they extend a query\n    // string.\n    reSearch(/\\[(.*?)\\]/g, (optionalTags: RegExpMatchArray) => {\n      if (optionalTags.length > 1) {\n        throw new Error(`Front endpoint ${path} is incorrectly defined`);\n      }\n\n      // Add each of these tags to an array used for the query string.\n      const trimmedTags = optionalTags[0];\n      const tags = trimmedTags.substring(1, trimmedTags.length - 1).split(\":\");\n      const queryTags: { [key: string]: string } = {};\n\n      // Ensure we remove the optional signature.\n      // QueryString any tags that aren't the search string.\n      newPath = newPath.replace(trimmedTags, \"\");\n      _.each(tags, tag => {\n        if (tag !== \"q\" && data[tag]) {\n          queryTags[tag] = data[tag];\n        }\n      });\n      newPath = `${newPath}?${querystring.stringify(queryTags)}`;\n\n      // If we have a search string, append fully qualified string here.\n      if (_.includes(tags, \"q\")) {\n        newPath += `&${data.q}`;\n      }\n    });\n\n    return newPath;\n  }\n\n  private validateEventSignature(data: any, signature: string): boolean {\n    let hash = \"\";\n    try {\n      hash = crypto\n        .createHmac(\"sha1\", this.apiSecret)\n        .update(JSON.stringify(data))\n        .digest(\"base64\");\n    } catch (err) {\n      return false;\n    }\n\n    return hash === signature;\n  }\n}\n\nexport type Callback<T> = (err: Error | null, response: T | null) => void;\n\nexport interface Attachment {\n  filename: string;\n  url: string;\n  contentType: string;\n  size: number;\n  metadata: any;\n}\n\nexport interface Author {\n  _links: Links;\n  id: string;\n  email: string;\n  username: string;\n  first_name: string;\n  last_name: string;\n  is_admin: boolean;\n  is_available: boolean;\n}\n\nexport interface ConversationReference {\n  conversation_reference: string;\n  status?: string;\n}\n\nexport class FrontError extends TypedError {\n  public name: string;\n  public status: number;\n  public title: string;\n  public message: string;\n  public details?: string[];\n  [key: string]: number | string | string[] | void;\n\n  constructor(error: any) {\n    super(error);\n\n    const frontError = error.error._error;\n    if (frontError) {\n      _.each([\"status\", \"title\", \"message\", \"details\"], key => {\n        if (frontError[key]) {\n          this[key] = frontError[key];\n        }\n      });\n    }\n  }\n}\n\nexport interface Event {\n  _links: Links;\n  id: string;\n  type: string;\n  emitted_at: number;\n  source: {\n    _meta: {\n      type: any;\n    };\n    data?: any;\n  };\n  target?: {\n    _meta: {\n      type: any;\n    };\n    data?: any;\n  };\n  conversation: Conversation;\n}\n\nexport interface Links {\n  self: string;\n  related: {\n    channels?: string;\n    comments?: string;\n    conversation?: string;\n    conversations?: string;\n    contact?: string;\n    events?: string;\n    followers?: string;\n    inboxes?: string;\n    messages?: string;\n    message_replied_to?: string;\n    mentions?: string;\n    teammates?: string;\n  };\n}\n\nexport interface Pagination {\n  limit: number;\n  next?: string;\n  prev?: string;\n}\n\nexport interface Recipient {\n  _links: Links;\n  handle: string;\n  role: string;\n}\n\nexport interface Sender {\n  contact_id?: string;\n  name?: string;\n  handle: string;\n}\n\nexport interface Status {\n  status: string;\n}\n\nexport interface Tag {\n  _links: Links;\n  id: string;\n  name: string;\n}\n\n// Channels ///////////////////////////////////////////////////////////////////\nexport interface Channel {\n  _links: Links;\n  address: string;\n  id: string;\n  send_as: string;\n  settings?: ChannelSettings;\n  type: string;\n}\n\nexport interface ChannelSettings {\n  webhook_url: string;\n}\n\n// Comments ///////////////////////////////////////////////////////////////////\nexport interface Comment {\n  _links: Links;\n  author: Author;\n  body: string;\n  id: string;\n  posted_at: string;\n}\n\nexport interface CommentMentions {\n  _pagination: Pagination;\n  _links: Links;\n  _results: Author[];\n}\n\n// Used for making requests\nexport namespace CommentRequest {\n  // Request structures /////////////////////////////////////////////////////\n  export interface Create {\n    conversation_id: string;\n    author_id: string;\n    body: string;\n    [key: string]: string;\n  }\n\n  export interface Get {\n    comment_id: string;\n    [key: string]: string;\n  }\n\n  export interface ListMentions {\n    comment_id: string;\n    [key: string]: string;\n  }\n}\n\n// Contacts ///////////////////////////////////////////////////////////////////\nexport interface Contact {\n  _links: Links;\n  id: string;\n  name: string;\n  description: string;\n  avatar_url: string;\n  is_spammer: boolean;\n  links: string[];\n  handles: Array<{\n    handle: string;\n    source: string;\n  }>;\n  groups: Array<{\n    _links: Links;\n    id: string;\n    name: string;\n    is_private: boolean;\n  }>;\n  updated_at: number;\n  custom_fields: {\n    [key: string]: string;\n  };\n  is_private: boolean;\n}\n\nexport namespace ContactRequest {\n  // Request structures /////////////////////////////////////////////////////\n  export interface Create {\n    handles: Array<{\n      handle: string;\n      source: string;\n    }>;\n    name?: string;\n    description?: string;\n    is_spammer?: boolean;\n    links?: string[];\n    group_names?: string[];\n    custom_fields?: {\n      [key: string]: string;\n    };\n  }\n\n  export interface Get {\n    contact_id: string;\n  }\n\n  export interface Update {\n    contact_id: string;\n    name?: string;\n    description?: string;\n    avatar?: string;\n    is_spammer?: boolean;\n    links?: string[];\n    group_names?: string[];\n    custom_fields?: {\n      [key: string]: string;\n    };\n  }\n\n  export interface Delete {\n    contact_id: string;\n  }\n}\n\n// Conversations //////////////////////////////////////////////////////////////\nexport interface Conversation {\n  _links: Links;\n  id: string;\n  subject: string;\n  status: string;\n  assignee: Author;\n  recipient: Recipient;\n  tags: Tag[];\n  last_message: Message;\n  created_at: number;\n}\n\nexport interface Conversations {\n  _pagination: Pagination;\n  _links: Links;\n  _results: Conversation[];\n}\n\nexport interface ConversationComments {\n  _pagination: Pagination;\n  _links: Links;\n  _results: Comment[];\n}\n\nexport interface ConversationInboxes {\n  _pagination: Pagination;\n  _links: Links;\n  _results: Inbox[];\n}\n\nexport interface ConversationFollowers {\n  _pagination: Pagination;\n  _links: Links;\n  _results: Author[];\n}\n\nexport interface ConversationMessages {\n  _pagination: Pagination;\n  _links: Links;\n  _results: Message[];\n}\n\nexport namespace ConversationRequest {\n  // Request structures /////////////////////////////////////////////////////\n  export interface List {\n    q?: string;\n    page_token?: string;\n    limit?: number;\n    [key: string]: string | number | void;\n  }\n\n  export interface Get {\n    conversation_id: string;\n    [key: string]: string;\n  }\n\n  export interface Update {\n    conversation_id: string;\n    assignee_id?: string;\n    inbox_id?: string;\n    status?: string;\n    tags?: string[];\n    [key: string]: string | string[] | void;\n  }\n\n  export interface ListComments {\n    conversation_id: string;\n    [key: string]: string;\n  }\n\n  export interface ListInboxes {\n    conversation_id: string;\n    [key: string]: string;\n  }\n\n  export interface ListFollowers {\n    conversation_id: string;\n    [key: string]: string;\n  }\n\n  export interface ListMessages {\n    conversation_id: string;\n    page_token?: string;\n    limit?: number;\n    [key: string]: string | number | void;\n  }\n}\n\n// Inboxes ////////////////////////////////////////////////////////////////////\nexport interface Inbox {\n  _links: Links;\n  address: string;\n  id: string;\n  name: string;\n  send_as: string;\n  type: string;\n}\n\nexport interface Inboxes {\n  _pagination: Pagination;\n  _links: Links;\n  _results: Inbox[];\n}\n\nexport interface InboxCreation {\n  id: string;\n  name: string;\n}\n\nexport interface InboxChannels {\n  _pagination: Pagination;\n  _links: Links;\n  _results: Channel[];\n}\n\nexport interface InboxConversations {\n  _pagination: Pagination;\n  _links: Links;\n  _results: Conversation[];\n}\n\nexport interface InboxTeammates {\n  _pagination: Pagination;\n  _links: Links;\n  _results: Author[];\n}\n\nexport namespace InboxRequest {\n  // Request structures /////////////////////////////////////////////////////\n  export interface Create {\n    name: string;\n    teammate_ids?: string[];\n    [key: string]: string | string[] | void;\n  }\n\n  export interface CreateChannel {\n    inbox_id: string;\n    type:\n      | \"smtp\"\n      | \"imap\"\n      | \"twilio\"\n      | \"twitter\"\n      | \"facebook\"\n      | \"smooch\"\n      | \"intercom\"\n      | \"truly\"\n      | \"custom\";\n    settings: {\n      webhook_url: string;\n    };\n  }\n\n  export interface Get {\n    inbox_id: string;\n    [key: string]: string;\n  }\n\n  export interface ListChannels {\n    inbox_id: string;\n    [key: string]: string;\n  }\n\n  export interface ListConversations {\n    inbox_id: string;\n    q?: string;\n    page_token?: string;\n    limit?: number;\n    [key: string]: string | number | void;\n  }\n\n  export interface ListTeammates {\n    inbox_id: string;\n    [key: string]: string;\n  }\n}\n\n// Messages ///////////////////////////////////////////////////////////////////\nexport interface Message {\n  _links: Links;\n  id: string;\n  type: string;\n  is_inbound: boolean;\n  is_draft: boolean;\n  error_type?: string;\n  created_at: number;\n  blurb: string;\n  author: Author;\n  recipients: Recipient[];\n  body: string;\n  text: string;\n  attachments: Attachment[];\n  metadata: any;\n}\n\nexport namespace MessageRequest {\n  // Request structures /////////////////////////////////////////////////////\n  export interface MessageOptions {\n    tags?: string[];\n    archive?: boolean;\n    [key: string]: string[] | boolean | void;\n  }\n\n  export interface Get {\n    message_id: string;\n    [key: string]: string;\n  }\n\n  // Base object for message sending.\n  export interface SendBase {\n    author_id?: string;\n    subject?: string;\n    body: string;\n    text?: string;\n    options?: MessageOptions;\n    cc?: string[];\n    bcc?: string[];\n    [key: string]: string | string[] | MessageOptions | void;\n  }\n\n  // Send a MessageRequest.\n  export interface Send extends SendBase {\n    channel_id: string;\n    to: string[];\n    [key: string]: string | string[] | MessageOptions | void;\n  }\n\n  // Send a reply to a ConversationRequest.\n  export interface Reply extends SendBase {\n    conversation_id: string;\n    to?: string[];\n    channel_id?: string;\n    [key: string]: string | string[] | MessageOptions | void;\n  }\n\n  export interface ReceiveCustom {\n    channel_id: string;\n    sender: Sender;\n    subject?: string;\n    body: string;\n    body_format?: string;\n    metadata?: any;\n    [key: string]: string | any | void;\n  }\n}\n\n// Teammates //////////////////////////////////////////////////////////////////\nexport type Teammate = Author;\n\nexport interface Teammates {\n  _links: Links;\n  _results: Teammate[];\n}\n\nexport namespace TeammateRequest {\n  // Request structures /////////////////////////////////////////////////////\n  export interface Get {\n    teammate_id: string;\n  }\n\n  export interface Update {\n    teammate_id: string;\n    username?: string;\n    first_name?: string;\n    last_name?: string;\n    is_admin?: boolean;\n    is_available?: boolean;\n  }\n}\n\n// Topics /////////////////////////////////////////////////////////////////////\nexport interface TopicConversations {\n  _pagination: Pagination;\n  _links: Links;\n  _results: Conversation[];\n}\n\nexport namespace TopicRequest {\n  export interface ListConversations {\n    topic_id: string;\n    q?: string;\n    page_token?: string;\n    limit?: number;\n    [key: string]: string | number | void;\n  }\n}\n\n// Export Types ///////////////////////////////////////////////////////////////\nexport type EventCallback = (error: Error | null, event?: Event) => void;\n\nexport interface EventHookOptions {\n  server?: express.Application;\n  port?: number;\n  hookPath?: string;\n}\n\nexport type RequestData =\n  | CommentRequest.Create\n  | CommentRequest.Get\n  | CommentRequest.ListMentions\n  | ConversationRequest.List\n  | ConversationRequest.Get\n  | ConversationRequest.Update\n  | ConversationRequest.ListComments\n  | ConversationRequest.ListFollowers\n  | ConversationRequest.ListInboxes\n  | ConversationRequest.ListMessages\n  | InboxRequest.Create\n  | InboxRequest.Get\n  | InboxRequest.ListChannels\n  | InboxRequest.ListConversations\n  | InboxRequest.ListTeammates\n  | MessageRequest.Get\n  | MessageRequest.Send\n  | MessageRequest.Reply\n  | MessageRequest.ReceiveCustom\n  | TopicRequest.ListConversations;\n\nexport type ResponseData =\n  | Attachment\n  | Author\n  | Links\n  | Recipient\n  | Sender\n  | Tag\n  | ConversationReference\n  | Comment\n  | CommentMentions\n  | Conversation\n  | Conversations\n  | ConversationComments\n  | ConversationInboxes\n  | ConversationFollowers\n  | ConversationMessages\n  | Inbox\n  | Inboxes\n  | InboxCreation\n  | InboxChannels\n  | InboxConversations\n  | InboxTeammates\n  | Message\n  | TopicConversations;\n"],"sourceRoot":"../lib"}